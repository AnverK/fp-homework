module Bonus
    ( Cont (..)
    ) where

import Prelude

--------------------------------------------------------------------------------

-- Один анестезиолог работавший 5 лет без продыха, получил наконец отпуск.
-- Посчитал свои накопленные кровные, оказалось, что в обрез хватает на
-- самый дешевый тур в Египет. Ну думает, хоть раз в жизни отдохну как
-- человек, без этой адской работы. Купил путевку, сел в самолет, летит.
-- Устроился в кресле поудобнее, взял у стюардессы баночку пива, открыл,
-- только отхлебнул и расслабился, как тут же объявление по салону:
-- "Уважаемые пассажиры! срочно требуется анестезиолог." "Ни хрена,–думает–не
-- пойду, затрахался уже, все, я на отдыхе." Тут опять: "Уважаемые пассажиры!
-- Хирургу в первом классе требуется помощь анестезиолога." "Ну что за дерьмо.
-- Что ж придется идти коллега все–таки, надо помочь"
-- Встает, идет в первый класс, а там в отдельном кресле со столиком, под
-- абажуром, сидит хирург. На столике бокал коньяка, в одной руке сигара, в
-- другой лупа, на коленях альбом живописи.
-- — Вы анестезиолог?
-- — Да...
-- — Свет поправьте!

--------------------------------------------------------------------------------


newtype Cont r a = Cont { runCont :: (a -> r) -> r }

instance Functor (Cont r) where
  fmap f (Cont arr) = Cont $ \br -> arr (br . f)

instance Applicative (Cont r) where
  pure a = Cont $ \ar -> ar a

  (Cont f) <*> (Cont arr) = Cont $ \br ->
    f $ \g ->
    arr $ \a ->
    br (g a)

instance Monad (Cont r) where
  return = pure

  (Cont arr) >>= f = Cont $ \br ->
    arr $ \a ->
    runCont (f a) br
